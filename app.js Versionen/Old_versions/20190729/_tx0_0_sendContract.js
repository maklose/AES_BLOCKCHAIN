const Tx = require('ethereumjs-tx');
var fs = require('fs'); //reading/writing JSON files
const web3Abi = require('web3-eth-abi');

var handleReceipt = (error, receipt) => {
  if (error) console.error(error);
  else {
    console.log(receipt);
    //res.json(receipt);
  }
}

function wait(ms) {
  var d = new Date();
  var d2 = null;
  do { d2 = new Date(); }
  while (d2 - d < ms);
}


//Path has to be adapted to every PC
var configInput = require('C:/Users/demoerc/dropbox_uni/Dropbox/AES_File_Exchange/Mandant_202/To_appjs/appjs_config.json');
var filePathCreateSC = configInput.variables.filePathM202_To_appjs + 'new_sc.json';
var filePathNewSC     = configInput.variables.filePathM202_To_SAP + 'new_sc_address.json';
var GasPrice = configInput.variables.SC_GasPrice;
var GasLimit = configInput.variables.SC_GasLimit;
var FromAddress;
var PrivateKey;
var contractPartner;
var jsonInput;
var inputError = 'false';

//AES Smart Contract
var CaDBytecode = '608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610a7d806100326000396000f3fe6080604052600436106101355760003560e01c8063727a0b65116100ab578063a2bcd27a1161006f578063a2bcd27a14610327578063a87d942c1461033c578063ae15eb8e14610351578063b18a92cc146103c5578063bdba9255146103da578063e5444e31146103ef57610135565b8063727a0b65146102765780637999e41a146102a05780637cdacb98146102b55780637f8a9ab2146102e8578063992ebc52146102fd57610135565b806332a2c5d0116100fd57806332a2c5d0146101f0578063442890d5146102055780635319a4a91461021a578063590e1ae31461022f57806365c3621b146102375780636afa45101461024c57610135565b806312065fe01461013a5780632ce0a6ee146101615780632ee2a7af1461018d57806330f3f0db146101be5780633201cde0146101db575b600080fd5b34801561014657600080fd5b5061014f610404565b60408051918252519081900360200190f35b34801561016d57600080fd5b5061018b6004803603602081101561018457600080fd5b5035610442565b005b34801561019957600080fd5b506101a261045e565b604080516001600160a01b039092168252519081900360200190f35b61018b600480360360208110156101d457600080fd5b5035610486565b3480156101e757600080fd5b5061014f6104be565b3480156101fc57600080fd5b506101a26104f2565b34801561021157600080fd5b506101a2610524565b34801561022657600080fd5b5061018b610561565b61018b6105ae565b34801561024357600080fd5b5061014f6105ef565b34801561025857600080fd5b5061018b6004803603602081101561026f57600080fd5b5035610623565b34801561028257600080fd5b5061018b6004803603602081101561029957600080fd5b5035610677565b3480156102ac57600080fd5b5061018b6106cb565b3480156102c157600080fd5b5061018b600480360360208110156102d857600080fd5b50356001600160a01b0316610872565b3480156102f457600080fd5b5061014f6108ab565b34801561030957600080fd5b5061018b6004803603602081101561032057600080fd5b50356108df565b34801561033357600080fd5b5061014f6108fb565b34801561034857600080fd5b5061014f61091a565b34801561035d57600080fd5b50610366610964565b604080516001600160a01b039b8c168152998b1660208b015297909916888801526060880195909552608087019390935260a086019190915260c085015260e08401526101008301526101208201929092529051908190036101400190f35b3480156103d157600080fd5b5061014f610995565b3480156103e657600080fd5b5061014f6109f5565b3480156103fb57600080fd5b5061014f610a29565b600080546001600160a01b031633148061042857506001546001600160a01b031633145b61043157600080fd5b50670de0b6b3a76400003031045b90565b6000546001600160a01b0316331461045957600080fd5b600755565b600080546001600160a01b0316331461047657600080fd5b506001546001600160a01b031690565b6000546001600160a01b0316331461049d57600080fd5b600080546001600160a01b0316815260056020526040902080549091019055565b600080546001600160a01b03163314806104e257506001546001600160a01b031633145b6104eb57600080fd5b5060035490565b600080546001600160a01b031633148061051657506001546001600160a01b031633145b61051f57600080fd5b503090565b600080546001600160a01b031633148061054857506001546001600160a01b031633145b61055157600080fd5b506000546001600160a01b031690565b600754670de0b6b3a764000002600e8190556001546040516001600160a01b039091169180156108fc02916000818181858888f193505050501580156105ab573d6000803e3d6000fd5b50565b3031600f819055600080546040516001600160a01b03909116926108fc81150292909190818181858888f193505050501580156105ab573d6000803e3d6000fd5b600080546001600160a01b031633148061061357506001546001600160a01b031633145b61061c57600080fd5b5060045490565b6000546001600160a01b03163314801561063f57506001600354105b80156106585750600754670de0b6b3a764000030310410155b8015610665575060075415155b61066e57600080fd5b60035542600a55565b6001546001600160a01b03163314801561069357506001600454105b80156106ac5750600754670de0b6b3a764000030310410155b80156106b9575060075415155b6106c257600080fd5b60045542600b55565b6000546001600160a01b03163314806106ee57506001546001600160a01b031633145b80156106fc57506003546001145b801561070a57506004546001145b80156107235750600754670de0b6b3a764000030310410155b8015610730575060075415155b61073957600080fd5b600754670de0b6b3a764000002600e8190556001546040516001600160a01b039091169180156108fc02916000818181858888f19350505050158015610783573d6000803e3d6000fd5b5042600c819055600054600154600354600a54600454600b54600654600754604080516001600160a01b03998a168152979098166020880152868801959095526060860193909352608085019190915260a084015260c083019490945260e0820193909352610100810192909252517fedfc1e8aa9e20e2d201b724ea9c6aed958dfee525cb76bb7e2b0c99b2918831f918190036101200190a1306001600160a01b031663590e1ae36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561085857600080fd5b505af115801561086c573d6000803e3d6000fd5b50505050565b6000546001600160a01b0316331461088957600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314806108cf57506001546001600160a01b031633145b6108d857600080fd5b5060075490565b6000546001600160a01b031633146108f657600080fd5b600655565b600080546001600160a01b0316331461091357600080fd5b50600b5490565b600080546001600160a01b031633148061093e57506001546001600160a01b031633145b61094757600080fd5b50600080546001600160a01b031681526005602052604090205490565b600054600154600354600454600654600754600a54600b54600c546001600160a01b03988916999890971697309790565b600080546001600160a01b03163314806109b957506001546001600160a01b031633145b6109c257600080fd5b600754670de0b6b3a7640000303104101580156109e0575060075415155b156109ed5750600161043f565b50600061043f565b600080546001600160a01b0316331480610a1957506001546001600160a01b031633145b610a2257600080fd5b5060065490565b600080546001600160a01b03163314610a4157600080fd5b50600a549056fea265627a7a72305820a0142d532259c1dcc6325d45ccf3f5684327b9f688349a05d0846e7ac8f901ac64736f6c634300050a0032';
var Data = "0x" + CaDBytecode;

try{
//Read JSON File and fill into variables oben!!
jsonInput           = require(filePathCreateSC);
FromAddress         = jsonInput.NewContract.Machine_Wallet;
PrivateKey          = jsonInput.NewContract.PrivateKey_Machine_W;
contractPartner     = jsonInput.NewContract.CP_Wallet;
MaintenanceCost     = jsonInput.NewContract.MaintenanceCost;
CounterLimitHours   = jsonInput.NewContract.CounterLimitHours;
}
catch (e)
{
  console.log("No new Smart Contract needs to be created!");
  console.log("");
  console.log("");
  inputError = 'true';
}

if (inputError == 'false')
{
//1st Calculate Nonce:
web3.eth.getTransactionCount(FromAddress, 'pending', (err, txCount) => {
  //Estimate Gas Price
  web3.eth.estimateGas({ to: contractPartner, data: Data },
    (err, gasEstimate) => {

      //Create Transaction Object with raw data
      var rawTx = {
        nonce: web3.utils.toHex(txCount),
        gasPrice: web3.utils.toHex(GasPrice.toString()),
        gasLimit: web3.utils.toHex(GasLimit.toString()),
        data: Data
      };

      //digital signature
      var privateKey = new Buffer(PrivateKey, 'hex');
      var tx = new Tx(rawTx);
      tx.sign(privateKey);

      //send signed Transaction to Blockchain
      var serializedTx = tx.serialize();
      web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), (err, hash) => {
        if (err) {
          console.log(err); return;
        }

        // Log the tx, you can explore status manually with eth.getTransaction()
        console.log('Contract creation tx: ' + hash);
        



//TODO: Wait besser ausprogrammieren mit einer 'While receipt == null FunktionalitÃ¤t'



        
        // Wait 120sec for the transaction to be mined    
        wait(100000);
        
        //wait onto TX_Receipt via while function did not work --> document
        web3.eth.getTransactionReceipt(hash, (err, receipt) => {
          console.log("cAddr: " + receipt.contractAddress);
          var json = '{ "CP_Wallet": "' + contractPartner +'",'
                    +' "Machine_Wallet": "' + FromAddress + '",'
                    + '"SC_Address": "' + receipt.contractAddress + '",'
                    + '"MaintenanceCost": "' + MaintenanceCost + '",'
                    + '"CounterLimitHours": "' + CounterLimitHours + '" }';
          fs.writeFile(filePathNewSC,
            json, 'utf8', function (err) { if (err) throw err; console.log('complete'); });
               
          });
         });
         
    });
});
}