const Tx = require('ethereumjs-tx');
var fs = require('fs'); //reading/writing JSON files
const web3Abi = require('web3-eth-abi');

var handleReceipt = (error, receipt) => {
  if (error) console.error(error);
  else {
    console.log(receipt);
    //res.json(receipt);
  }
}

function wait(ms) {
  var d = new Date();
  var d2 = null;
  do { d2 = new Date(); }
  while (d2 - d < ms);
}


//Path has to be adapted to every PC
var configInput = require('C:/Users/demoerc/dropbox_uni/Dropbox/AES_File_Exchange/Mandant_202/To_appjs/appjs_config.json');
var filePathCreateSC = configInput.variables.filePathM202_To_appjs + 'CreateMaintContract.json';
var filePathNewSC     = configInput.variables.filePathM202_To_SAP + 'newSC_Address_appjs.json';
var GasPrice = configInput.variables.SC_GasPrice;
var GasLimit = configInput.variables.SC_GasLimit;
var FromAddress;
var PrivateKey;
var contractPartner;
var jsonInput;

//AES Smart Contract
var CaDBytecode_old1 = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610840806100606000396000f3fe60806040526004361061009e576000357c01000000000000000000000000000000000000000000000000000000009004806312065fe0146100a35780632ee2a7af146100ce57806330f3f0db1461012557806332a2c5d014610153578063442890d5146101aa5780637cdacb9814610201578063992ebc5214610252578063a87d942c1461028d578063a9e0f3ed146102b8578063bdba9255146102e7575b600080fd5b3480156100af57600080fd5b506100b8610312565b6040518082815260200191505060405180910390f35b3480156100da57600080fd5b506100e361037a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101516004803603602081101561013b57600080fd5b81019080803590602001909291905050506103ff565b005b34801561015f57600080fd5b50610168610539565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101b657600080fd5b506101bf61059c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561020d57600080fd5b506102506004803603602081101561022457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610620565b005b34801561025e57600080fd5b5061028b6004803603602081101561027557600080fd5b81019080803590602001909291905050506106bf565b005b34801561029957600080fd5b506102a2610724565b6040518082815260200191505060405180910390f35b3480156102c457600080fd5b506102cd61078c565b604051808215151515815260200191505060405180910390f35b3480156102f357600080fd5b506102fc61080a565b6040518082815260200191505060405180910390f35b6000600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103d757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561045a57600080fd5b80600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555034600360008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561059657600080fd5b30905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105f957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561067b57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561071a57600080fd5b8060058190555050565b6000600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600554600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156108025760019050610807565b600090505b90565b600060055490509056fea165627a7a7230582034f46e61c84b17e7e8b82a49a4a40c071cce47f55aa96ff02962c1e7ae6efb610029";
var CaDBytecode_old2 = "608060405234801561001057600080fd5b5060008054600160a060020a0319163317905561079f806100326000396000f3fe6080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe0811461010b5780632ce0a6ee146101325780632ee2a7af1461015e57806330f3f0db1461018f5780633201cde0146101ac57806332a2c5d0146101c1578063442890d5146101d657806365c3621b146101eb5780636afa451014610200578063727a0b651461022a5780637999e41a146102545780637cdacb98146102695780637f8a9ab21461029c578063992ebc52146102b1578063a2bcd27a146102db578063a87d942c146102f0578063a9e0f3ed14610305578063bdba92551461031a578063e5444e311461032f575b600080fd5b34801561011757600080fd5b50610120610344565b60408051918252519081900360200190f35b34801561013e57600080fd5b5061015c6004803603602081101561015557600080fd5b5035610391565b005b34801561016a57600080fd5b506101736103ad565b60408051600160a060020a039092168252519081900360200190f35b61015c600480360360208110156101a557600080fd5b50356103d5565b3480156101b857600080fd5b50610120610425565b3480156101cd57600080fd5b5061017361045b565b3480156101e257600080fd5b5061017361048f565b3480156101f757600080fd5b506101206104ce565b34801561020c57600080fd5b5061015c6004803603602081101561022357600080fd5b5035610504565b34801561023657600080fd5b5061015c6004803603602081101561024d57600080fd5b5035610534565b34801561026057600080fd5b5061015c610564565b34801561027557600080fd5b5061015c6004803603602081101561028c57600080fd5b5035600160a060020a03166105e9565b3480156102a857600080fd5b5061012061062f565b3480156102bd57600080fd5b5061015c600480360360208110156102d457600080fd5b5035610665565b3480156102e757600080fd5b50610120610681565b3480156102fc57600080fd5b506101206106a0565b34801561031157600080fd5b506101206106ec565b34801561032657600080fd5b50610120610735565b34801561033b57600080fd5b50610120610754565b60008054600160a060020a03163314806103685750600154600160a060020a031633145b151561037357600080fd5b5060008054600160a060020a03168152600560205260409020545b90565b600054600160a060020a031633146103a857600080fd5b600855565b60008054600160a060020a031633146103c557600080fd5b50600154600160a060020a031690565b600054600160a060020a031633146103ec57600080fd5b60008054600160a060020a0390811682526006602090815260408084208054909501909455825490911682526005905220805434019055565b60008054600160a060020a03163314806104495750600154600160a060020a031633145b151561045457600080fd5b5060035490565b60008054600160a060020a031633148061047f5750600154600160a060020a031633145b151561048a57600080fd5b503090565b60008054600160a060020a03163314806104b35750600154600160a060020a031633145b15156104be57600080fd5b50600054600160a060020a031690565b60008054600160a060020a03163314806104f25750600154600160a060020a031633145b15156104fd57600080fd5b5060045490565b600054600160a060020a03163314801561052057506001600354105b151561052b57600080fd5b60035542600b55565b600154600160a060020a03163314801561055057506001600454105b151561055b57600080fd5b60045542600c55565b600054600160a060020a03163314806105875750600154600160a060020a031633145b151561059257600080fd5b60035460011480156105a657506004546001145b156105e757600154604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156105e5573d6000803e3d6000fd5b505b565b600054600160a060020a0316331461060057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008054600160a060020a03163314806106535750600154600160a060020a031633145b151561065e57600080fd5b5060085490565b600054600160a060020a0316331461067c57600080fd5b600755565b60008054600160a060020a0316331461069957600080fd5b50600c5490565b60008054600160a060020a03163314806106c45750600154600160a060020a031633145b15156106cf57600080fd5b5060008054600160a060020a031681526006602052604090205490565b60008054600160a060020a03163314806107105750600154600160a060020a031633145b151561071b57600080fd5b60085430311061072d5750600161038e565b50600061038e565b60008054600160a060020a0316331461074d57600080fd5b5060075490565b60008054600160a060020a0316331461076c57600080fd5b50600b549056fea165627a7a72305820b4e19c850fa09bf415f4048d2cce46df226ec71db60a5525b23c91149617595a0029";
var CaDBytecode = "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556109ff806100326000396000f3fe60806040526004361061012a5760003560e01c80637999e41a116100ab578063a87d942c1161006f578063a87d942c1461036a578063ae15eb8e1461037f578063b18a92cc14610394578063bdba9255146103a9578063e5444e31146103be578063f8a8fd6d146103d35761012a565b80637999e41a146102785780637cdacb98146102e35780637f8a9ab214610316578063992ebc521461032b578063a2bcd27a146103555761012a565b806332a2c5d0116100f257806332a2c5d0146101e5578063442890d5146101fa57806365c3621b1461020f5780636afa451014610224578063727a0b651461024e5761012a565b806312065fe01461012f5780632ce0a6ee146101565780632ee2a7af1461018257806330f3f0db146101b35780633201cde0146101d0575b600080fd5b34801561013b57600080fd5b506101446103e8565b60408051918252519081900360200190f35b34801561016257600080fd5b506101806004803603602081101561017957600080fd5b5035610426565b005b34801561018e57600080fd5b50610197610442565b604080516001600160a01b039092168252519081900360200190f35b610180600480360360208110156101c957600080fd5b503561046a565b3480156101dc57600080fd5b506101446104ba565b3480156101f157600080fd5b506101976104ee565b34801561020657600080fd5b50610197610520565b34801561021b57600080fd5b5061014461055d565b34801561023057600080fd5b506101806004803603602081101561024757600080fd5b5035610591565b34801561025a57600080fd5b506101806004803603602081101561027157600080fd5b50356105e5565b34801561028457600080fd5b5061028d6105ee565b604080516001600160a01b039a8b168152988a1660208a015296909816878701526060870194909452608086019290925260a085015260c084015260e08301526101008201929092529051908190036101200190f35b3480156102ef57600080fd5b506101806004803603602081101561030657600080fd5b50356001600160a01b0316610770565b34801561032257600080fd5b506101446107a9565b34801561033757600080fd5b506101806004803603602081101561034e57600080fd5b50356107dd565b34801561036157600080fd5b506101446107f9565b34801561037657600080fd5b50610144610818565b34801561038b57600080fd5b5061028d610862565b3480156103a057600080fd5b50610144610890565b3480156103b557600080fd5b506101446108f0565b3480156103ca57600080fd5b50610144610924565b3480156103df57600080fd5b50610180610943565b600080546001600160a01b031633148061040c57506001546001600160a01b031633145b61041557600080fd5b50670de0b6b3a76400003031045b90565b6000546001600160a01b0316331461043d57600080fd5b600855565b600080546001600160a01b0316331461045a57600080fd5b506001546001600160a01b031690565b6000546001600160a01b0316331461048157600080fd5b600080546001600160a01b0390811682526006602090815260408084208054909501909455825490911682526005905220805434019055565b600080546001600160a01b03163314806104de57506001546001600160a01b031633145b6104e757600080fd5b5060035490565b600080546001600160a01b031633148061051257506001546001600160a01b031633145b61051b57600080fd5b503090565b600080546001600160a01b031633148061054457506001546001600160a01b031633145b61054d57600080fd5b506000546001600160a01b031690565b600080546001600160a01b031633148061058157506001546001600160a01b031633145b61058a57600080fd5b5060045490565b6000546001600160a01b0316331480156105ad57506001600354105b80156105c65750600854670de0b6b3a764000030310410155b80156105d3575060085415155b6105dc57600080fd5b60035542600b55565b60045542600c55565b60008054819081908190819081908190819081906001600160a01b031633148061062257506001546001600160a01b031633145b61062b57600080fd5b600354600114801561063f57506004546001145b80156106585750600854670de0b6b3a764000030310410155b8015610665575060085415155b15610765576001546040516001600160a01b0390911690303180156108fc02916000818181858888f193505050501580156106a4573d6000803e3d6000fd5b50600054600154600354600b54600454600c54600754600854604080516001600160a01b03998a168152979098166020880152868801959095526060860193909352608085019190915260a084015260c083015260e082015290517fb8529655b955765db1985caeef43e85e2ac6d5e44df60849be3ef72094670362918190036101000190a15050600054600154600354600b54600454600c546007546008546001600160a01b039788169e50959096169b50309a50929850909650945092505b909192939495969798565b6000546001600160a01b0316331461078757600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314806107cd57506001546001600160a01b031633145b6107d657600080fd5b5060085490565b6000546001600160a01b031633146107f457600080fd5b600755565b600080546001600160a01b0316331461081157600080fd5b50600c5490565b600080546001600160a01b031633148061083c57506001546001600160a01b031633145b61084557600080fd5b50600080546001600160a01b031681526006602052604090205490565b600054600154600354600454600754600854600b54600c546001600160a01b03978816989790961696309690565b600080546001600160a01b03163314806108b457506001546001600160a01b031633145b6108bd57600080fd5b600854670de0b6b3a7640000303104101580156108db575060085415155b156108e857506001610423565b506000610423565b600080546001600160a01b031633148061091457506001546001600160a01b031633145b61091d57600080fd5b5060075490565b600080546001600160a01b0316331461093c57600080fd5b50600b5490565b600054600154600354600b54600454600c54600754600854604080516001600160a01b03998a168152979098166020880152868801959095526060860193909352608085019190915260a084015260c083015260e082015290517fb8529655b955765db1985caeef43e85e2ac6d5e44df60849be3ef72094670362918190036101000190a156fea265627a7a723058208f95ffdf50c18e095a257be1f254bb9e98204ea52168f9bee37f9e3139c2d92564736f6c634300050a0032";
var Data = "0x" + CaDBytecode;


//Read JSON File and fill into variables oben!!
jsonInput           = require(filePathCreateSC);
FromAddress         = jsonInput.NewContract.Machine_Wallet;
PrivateKey          = jsonInput.NewContract.PrivateKey_Machine_W;
contractPartner     = jsonInput.NewContract.CP_Wallet;
MaintenanceCost     = jsonInput.NewContract.MaintenanceCost;
CounterLimitHours   = jsonInput.NewContract.CounterLimitHours;


//1st Calculate Nonce:
web3.eth.getTransactionCount(FromAddress, 'pending', (err, txCount) => {
  //Estimate Gas Price
  web3.eth.estimateGas({ to: contractPartner, data: Data },
    (err, gasEstimate) => {

      //Create Transaction Object with raw data
      var rawTx = {
        nonce: web3.utils.toHex(txCount),
        gasPrice: web3.utils.toHex(GasPrice.toString()),
        gasLimit: web3.utils.toHex(GasLimit.toString()),
        data: Data
      };

      //digital signature
      var privateKey = new Buffer(PrivateKey, 'hex');
      var tx = new Tx(rawTx);
      tx.sign(privateKey);

      //send signed Transaction to Blockchain
      var serializedTx = tx.serialize();
      web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), (err, hash) => {
        if (err) {
          console.log(err); return;
        }

        // Log the tx, you can explore status manually with eth.getTransaction()
        console.log('Contract creation tx: ' + hash);
        



//TODO: Wait besser ausprogrammieren mit einer 'While receipt == null Funktionalität'



        
        // Wait 120sec for the transaction to be mined    
        wait(100000);
        
        //wait onto TX_Receipt via while function did not work --> document
        web3.eth.getTransactionReceipt(hash, (err, receipt) => {
          console.log("cAddr: " + receipt.contractAddress);
          var json = '{ "SC_Address": "' + receipt.contractAddress + '" }';
          fs.writeFile(filePathNewSC,
            json, 'utf8', function (err) { if (err) throw err; console.log('complete'); });
               
          });
         });
         
    });
});
